{%- set options = options ?? [] %}
{%- set value = value ?? null %}

{%- set class = (class ?? [])|explodeClass|merge([
    'radio-group',
    'pickture-group',
    (toggle ?? false) ? 'fieldtoggle' : null,
    (disabled ?? false) ? 'disabled' : null,
]|filter) %}

{%- set containerAttributes = {
    class: class,
    data: {
        'target-prefix': targetPrefix ?? false,
    },
}|merge(containerAttributes ?? [], recursive=true) %}

{%- if block('attr') is defined %}
    {%- set containerAttributes = containerAttributes|merge(('<div ' ~ block('attr') ~ '>')|parseAttr, recursive=true) %}
{% endif %}

{% tag 'fieldset' with containerAttributes %}
    {%- for key, option in options %}
        {%- if option is not iterable %}
            {%- set option = {label: option, value: key} %}
        {%- endif %}
        <div class="pickture-option" data-bleed="{{ option.background }}">
            {% if option.template matches '(^https?://|^/)' %}
                {% tag 'img' with {
                    src: option.template,
                    alt: '',
                    title: option.label,
                    class: "pickture-thumbnail",
                    } %}
                {% endtag %}
            {% elseif option.template|length %}
                {{ option.template|raw }}
            {% endif %}
            {% include "_includes/forms/radio" with {
                class: "pickture-radio-input",
                describedBy: describedBy ?? null,
                name: name ?? null,
                checked: (option.value is defined and option.value == value),
                autofocus: loop.first and (autofocus ?? false) and not craft.app.request.isMobileBrowser(true),
            }|merge(option) only %}
        </div>
    {% endfor %}
{% endtag %}

{% js %}
new PicktureField()
{% endjs %}
